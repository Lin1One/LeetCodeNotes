using System.Collections.Generic;

using System;
using System.Text;

namespace Study.LeetCode
{
    public partial class Solution
    {
        //191. 位1的个数
        //编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。

        //示例 1：

        //输入：00000000000000000000000000001011
        //输出：3
        //解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 '1'。
        //示例 2：

        //输入：00000000000000000000000010000000
        //输出：1
        //解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 '1'。
        //示例 3：

        //输入：11111111111111111111111111111101
        //输出：31
        //解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 '1'。


        //提示：

        //请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
        //在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

        public int HammingWeight(uint n)
        {
            //想法是对于任意数字 nn ，将 nn 和 n - 1n−1 做与运算，会把最后一个 11 的位变成 00 。
            int res = 0;
            while (n != 0)
            {
                res++;
                n &= (n - 1);
            }
            return res;
        }

        public int HammingWeight2(uint n)
        {
            int res = 0;
            while (n > 0)
            {
                if (n % 2 != 0)
                {
                    res++;
                }
                n = n / 2;
            }
            return res;

        }
    }
}




